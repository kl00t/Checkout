// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Checkout.BDD.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Checkout")]
    public partial class CheckoutFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Checkout.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Checkout", "Feature to represent a checkout scanner and the ability to calculate the total pr" +
                    "ice of all the items.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "sku",
                        "unitprice",
                        "description",
                        "specialoffer",
                        "quantity",
                        "discount"});
            table1.AddRow(new string[] {
                        "A",
                        "50.00",
                        "Pineapple",
                        "true",
                        "3",
                        "20.00"});
            table1.AddRow(new string[] {
                        "B",
                        "30.00",
                        "Mango",
                        "true",
                        "2",
                        "15.00"});
            table1.AddRow(new string[] {
                        "C",
                        "20.00",
                        "Kiwi",
                        "false",
                        "0",
                        "0"});
            table1.AddRow(new string[] {
                        "D",
                        "15.00",
                        "Melon",
                        "false",
                        "0",
                        "0"});
            table1.AddRow(new string[] {
                        "E",
                        "9.99",
                        "Banana",
                        "true",
                        "3",
                        "9.99"});
#line 5
 testRunner.Given("I have a system containing products", ((string)(null)), table1, "Given ");
#line 12
 testRunner.And("the charge for carrier bags is 0.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the total price of scanned items")]
        [NUnit.Framework.TestCaseAttribute("A", "1", "50.00", "50.00", "0", null)]
        [NUnit.Framework.TestCaseAttribute("A", "2", "100.00", "100.00", "0", null)]
        [NUnit.Framework.TestCaseAttribute("A", "3", "150.00", "130.00", "20.00", null)]
        [NUnit.Framework.TestCaseAttribute("E", "3", "29.97", "19.98", "9.99", null)]
        public virtual void CalculateTheTotalPriceOfScannedItems(string item, string quantity, string subtotal, string totalprice, string totaldiscount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the total price of scanned items", exampleTags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 15
 testRunner.Given("I have a checkout system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And(string.Format("I scan {0} {1} using the checkout", quantity, item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I calculate the total price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("the subtotal should be {0}", subtotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And(string.Format("the price should be {0}", totalprice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And(string.Format("the total discount applied is {0}", totaldiscount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
